const { MessageEmbed } = require('discord.js');
//const { diffdata } = require("../functions.js");

module.exports = {
	name: 'guildMemberRemove',
    async execute(member) {
        console.log('guildMemberRemove');
        console.log(`${member.user.tag} triggered an guildMemberRemove.`);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @' + member.user.tag + ' –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä!');

        const fetchedLogs = await member.guild.fetchAuditLogs({
          limit: 1,
          type: 'MEMBER_KICK',
        })


          // Since there's only 1 audit log entry in this collection, grab the first one
          const kickLog = fetchedLogs.entries.first();

          console.log(kickLog);
          // Perform a coherence check to make sure that there's *something*
          if (!kickLog) return console.log(`${member.user.tag} left the guild, most likely of their own will.`);
                
          // Now grab the user object of the person who kicked the member
          // Also grab the target of this action to double-check things
          const { executor, target } = kickLog;

          // Update the output with a bit more information
          // Also run a check to make sure that the log returned was for the same kicked member
          
          if (member.user.avatar == null) {
            ava = 'https://cdn.discordapp.com/embed/avatars/0.png'
          } 
          else {
            ava = member.user.displayAvatarURL()
          };
  
          console.log(member.deleted);

          if (member.deleted) {console.log('–ë—ã–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ')};
          
          
          if (target.id === member.id) {
            console.log(`${member.user.tag} left the guild; kicked by ${executor.tag}?`);

            try {
              mess = member.guild.channels.cache.find(channel => channel.name == "–º–æ–¥–µ—Ä–∞—Ü–∏—è-–ª–æ–≥"); // –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞    
              
              const embed = new MessageEmbed() //RichEmbed() //–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–º–±–µ–¥.
              .setAuthor(member.user.tag, ava) //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫.
              .setColor(`RED`) //–¶–≤–µ—Ç –∫—Ä–∞—Å–Ω—ã–π. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å hex.
              .setThumbnail(ava)
              .setDescription('üì§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@' + member.user.id + '> –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä!') //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ.
              .addField('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: ', `${executor.tag} (ID:${executor.id}) \n –ü–æ –ø—Ä–∏—á–∏–Ω–µ: ${kickLog.reason}`) //
              .setFooter("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + member.user.id)
              mess.send({ embeds: [embed] }); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º.
              } catch(err) {console.log('–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'); console.error(err)}

          } else {
            console.log(`${member.user.tag} left the guild, audit log fetch was inconclusive.`);

              try {
              mess = member.guild.channels.cache.find(channel => channel.name == "–º–æ–¥–µ—Ä–∞—Ü–∏—è-–ª–æ–≥"); // –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞    
              
              const embed = new MessageEmbed() //RichEmbed() //–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–º–±–µ–¥.
              .setAuthor(member.user.tag, ava) //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫.
              .setColor(`RED`) //–¶–≤–µ—Ç –∫—Ä–∞—Å–Ω—ã–π. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å hex.
              .setThumbnail(ava)
              .setDescription('üì§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@' + member.user.id + '> –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä!') //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ.
              //.addField('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: ', executor.tag) //–ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç
              .setFooter("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + member.user.id)
              mess.send({ embeds: [embed] }); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º.
              } catch(err) {console.log('–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'); console.error(err)}

            }



    },
};