const { prefix } = require('../config.json');
const { zanatie, zanadd, zanread, zanremove, zanrewrite, comms } = require("../functions.js");


module.exports = {
	name: 'messageCreate',
    execute(message) {

        console.log('message');
        //console.log(message);
        console.log(`${message.author.username} in #${message.channel.name} triggered an messageCreate.`);
        
        if (message.author.username != message.client.user.username && message.author.discriminator != message.client.user.discriminator && !message.author.bot) {
            
            try {
              vse_zanatia = zanread('test.json');
              user_a_name = message.author.username;
              //console.log(message.channel);
              vse_zanatia.forEach((item, index, array) => {
                //console.log(item.channel);
                if (item.channel_id == message.channel.id) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ (–¥–≤–∞ –∫–∞–Ω–∞–ª–∞ –≥–¥–µ –æ—Ç–∫—Ä—ã—Ç—ã –∑–∞–Ω—è—Ç–∏—è –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç)
                  id_zan = index;
                  //console.log(id_zan);
                  switch (vse_zanatia[id_zan].status) {
      
                    case 'open' :
                      if (message.content == '1') {
                        message.react("üëç");
                        if ((user_a_name !== "–ë–æ—Ç –ú–ö9") && (!vse_zanatia[id_zan].spisok.includes(user_a_name))) {
                          vse_zanatia[id_zan].spisok.push(user_a_name);
                          zanrewrite('test.json',id_zan,vse_zanatia[id_zan])
                        }
                      };  
                    break;
      
                    case 'start' :
                      //id_zan = msg.content.split(" ")[2];
                      //console.log(id_zan);
                      if (message.content == '0') {
                        message.react("üëå");  
                        if ((user_a_name !== "–ë–æ—Ç –ú–ö9") && (!vse_zanatia[id_zan].spisok.includes(user_a_name)) && (!vse_zanatia[id_zan].opozd.includes(user_a_name))) {
                          vse_zanatia[id_zan].opozd.push(user_a_name);  
                          zanrewrite('test.json',id_zan,vse_zanatia[id_zan])
                        }
                      }      
                    break;  
      
                    case 'finish' :
                      //id_zan = msg.content.split(" ")[2];
                      //console.log(id_zan);
                      if (message.content == '9') {
                        message.react("üëç");
                        if ((user_a_name !== "–ë–æ—Ç –ú–ö9") && (!vse_zanatia[id_zan].spisok_z.includes(user_a_name))) {
                          vse_zanatia[id_zan].spisok_z.push(user_a_name);
                          zanrewrite('test.json',id_zan,vse_zanatia[id_zan])
                        }
                      }
                    break;  
      
                    case 'close' :
                      //id_zan = msg.content.split(" ")[2];
                      console.log('–∑–∞–Ω—è—Ç–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º:' + id_zan + ' –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                      /*comms.zanyatie_[id_zan].spisok = ['–Ω–µ—Ç']; //–Ω–∞–≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
                      comms.zanyatie_[id_zan].opozd = ['–Ω–µ—Ç']; //–Ω–∞–≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç   
                      comms.zanyatie_[id_zan].spisok_z = ['–Ω–µ—Ç']; */
                    break;  
      
                    default :  
                      console.log('–æ–±—Ö–æ–¥ —Å–ø–∏—Å–∫–æ–≤');
                  } 
                } // –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ—Ç
              }); // –ø–µ—Ä–µ–±–æ—Ä –∑–∞–Ω—è—Ç–∏–π –∑–∞–∫–æ–Ω—á–µ–Ω
            } catch {console.log('–∑–∞–Ω—è—Ç–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç—ã')}


            var comm = message.content.trim() + " ";
            var comm_name = comm.slice(0, comm.indexOf(" ")).toLowerCase();
            var messArr = comm.split(" ");
            console.log(`${comm_name} - ${messArr}`);

            for (comm_count in comms) { // –ø–µ—Ä–µ–±–æ—Ä –∫–æ–º–º–∞–Ω–¥
              var comm2 = prefix + comms[comm_count].name;
              if (comm2 == comm_name) {
                comms[comm_count].out(message, messArr);
              }
            }    

        }
    },
};
